{
	"name": "listSome",
	"type": "function",
	"syntax": "listSome(list, closure [, delimiter] [, includeEmptyFields] [, multiCharacterDelimiter] [, parallel] [, maxThreads])",
	"member": "list.listSome(closure [, delimiter] [, includeEmptyFields] [, multiCharacterDelimiter] [, parallel] [, maxThreads])",
	"returns": "boolean",
	"related": ["arraySome","querySome"],
	"description": "This function calls a given closure/function with every element in a given string list and returns true, if one of the closure calls returns true.",
	"params": [
		{"name": "list", "description": "string list to iterate\n\nAlias: string", "required": true, "default": "", "type": "string", "values": []},
		{"name": "closure", "description": "function/closure that implements the following constructor [function(any value, numeric index,string list, string delimiter):boolean].\n\nAlias: function, callback, udf", "required": true, "default": "", "type": "function", "values": [],
			"callback_params": [
			    { "name": "value", "values": [], "default": "", "description": "current value from the list", "type": "any", "required": true },
			    { "name": "index", "values": [], "default": "", "description": "position in the list", "type": "numeric", "required": false },
			    { "name": "list", "values": [], "default": "", "description": "string list to iterate", "type": "string", "required": true },
			    { "name": "delimiter", "values": [], "default": "", "description": "delimiter used to separate the string list", "type": "string", "required": false }
			]
		},
		{"name": "delimiter", "description": "delimiter used to separate the string list", "required": false, "default": ",", "type": "string", "values": []},
		{"name": "includeEmptyFields", "description": "include empty fields or not", "required": false, "default": "false", "type": "boolean", "values": []},
		{"name": "multiCharacterDelimiter", "description": "specifying whether the delimiters parameter specifies a multi-character delimiter. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list to an array of color names", "required": false, "default": "true", "type": "boolean", "values": []},
		{"name": "parallel", "description": "execute closures parallel", "required": false, "default": "false", "type": "boolean", "values": []},
		{"name": "maxThreads", "description": "maximum number of threads executed, ignored when argument \"parallel\" is set to false", "required": false, "default": "20", "type": "numeric", "values": []}
	],
	"engines": {
		"lucee": {"minimum_version": "", "notes": "", "docs": "https://docs.lucee.org/reference/functions/listsome.html"}
	},
	"examples": [
		{
			"title":"Simple listsome example",
			"description":"Here,we've example about listsome function. It is supported only in Lucee.",
			"code":"var fruits = \"Apple,orange,banana,mango\";\r\nvar result = listsome(fruits,function(item){\r\n\treturn item IS \"Apple\";\r\n});\r\nwriteOutput(result);",
			"result":"true"
		},
		{
			"title":"Simple listsome member function example",
			"description":"Here,we've example about listsome member function. It is supported only in Lucee.",
			"code":"var fruits = \"Apple,orange,banana,mango\";\r\nvar result = fruits.some(function(item,index){\r\n\treturn index IS \"5\";\r\n});\r\nwriteOutput(result);",
			"result":"false"
		}
	],
	"links": [{
		"title":"Map, Reduce and other Higher Order Functions",
		"description":"A Primer for map, reduce, filter, and Higher Order Functions in general.",
		"url":"http://ryanguill.com/functional/higher-order-functions/2016/05/18/higher-order-functions.html"
	}]
}
